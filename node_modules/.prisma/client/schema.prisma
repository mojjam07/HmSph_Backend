generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  password  String
  firstName String
  lastName  String
  role      Role       @default(USER)
  avatar    String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  agent     Agent?
  contacts  Contact[]
  favorites Favorite[]
  reviews   Review[]
}

model Agent {
  id                 String             @id @default(cuid())
  userId             String             @unique
  licenseNumber      String             @unique
  commissionRate     Float              @default(0.03)
  specialties        String[]
  bio                String?
  phone              String?
  profileImage       String?
  isVerified         Boolean            @default(false)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  businessName       String?
  listingLimits      Int                @default(25)
  subscriptionPlan   SubscriptionPlan   @default(BASIC)
  verificationStatus VerificationStatus @default(PENDING)
  user               User               @relation(fields: [userId], references: [id])
  contacts           Contact[]
  payments           Payment[]
  properties         Property[]
  subscriptions      Subscription[]
}

model Property {
  id            String         @id @default(cuid())
  title         String
  description   String
  price         Int
  address       String
  city          String
  state         String
  zipCode       String
  bedrooms      Int
  bathrooms     Float
  squareFootage Int
  propertyType  PropertyType   @default(HOUSE)
  images        String[]
  status        PropertyStatus @default(ACTIVE)
  agentId       String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  contacts      Contact[]
  favorites     Favorite[]
  agent         Agent          @relation(fields: [agentId], references: [id])
  reviews       Review[]
}

model Review {
  id         String       @id @default(cuid())
  rating     Int
  comment    String
  propertyId String
  userId     String
  status     ReviewStatus @default(PENDING)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  dislikes   Int?         @default(0)
  likes      Int?         @default(0)
  property   Property     @relation(fields: [propertyId], references: [id])
  user       User         @relation(fields: [userId], references: [id])
}

model Favorite {
  id         String       @id @default(cuid())
  userId     String
  status     ReviewStatus @default(PENDING)
  propertyId String
  createdAt  DateTime     @default(now())
  property   Property     @relation(fields: [propertyId], references: [id])
  user       User         @relation(fields: [userId], references: [id])

  @@unique([userId, propertyId])
}

model Contact {
  id          String        @id @default(cuid())
  name        String
  email       String
  phone       String?
  subject     String
  message     String
  inquiryType String
  status      ContactStatus @default(NEW)
  userId      String?
  agentId     String?
  propertyId  String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  agent       Agent?        @relation(fields: [agentId], references: [id])
  property    Property?     @relation(fields: [propertyId], references: [id])
  user        User?         @relation(fields: [userId], references: [id])

  @@index([email])
  @@index([status])
  @@index([createdAt])
}

model Payment {
  id             String        @id @default(cuid())
  amount         Float
  currency       String        @default("NGN")
  status         PaymentStatus @default(PENDING)
  method         PaymentMethod
  transactionId  String?
  description    String?
  metadata       Json?
  agentId        String
  subscriptionId String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  agent          Agent         @relation(fields: [agentId], references: [id])
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])

  @@index([agentId])
  @@index([status])
  @@index([createdAt])
}

model Subscription {
  id        String           @id @default(cuid())
  plan      SubscriptionPlan
  status    PaymentStatus    @default(PENDING)
  startDate DateTime
  endDate   DateTime
  autoRenew Boolean          @default(true)
  price     Float
  currency  String           @default("NGN")
  features  Json?
  agentId   String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  payments  Payment[]
  agent     Agent            @relation(fields: [agentId], references: [id])

  @@index([agentId])
  @@index([status])
  @@index([endDate])
}

enum Role {
  USER
  AGENT
  ADMIN
}

enum PropertyType {
  HOUSE
  APARTMENT
  CONDO
  TOWNHOUSE
  LAND
  COMMERCIAL
}

enum PropertyStatus {
  ACTIVE
  PENDING
  SOLD
  RENTED
  OFF_MARKET
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

enum SubscriptionPlan {
  BASIC
  PRO
  PREMIUM
  ENTERPRISE
}

enum ContactStatus {
  NEW
  CONTACTED
  QUALIFIED
  CONVERTED
  ARCHIVED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CARD
  BANK_TRANSFER
  PAYPAL
  FLUTTERWAVE
  PAYSTACK
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}
